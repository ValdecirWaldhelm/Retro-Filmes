Iniciando um Projeto em Node + React + Next

 DEPENDECIA DE INICIO
 {
   "scripts": {
     "dev": "next dev",
     "build": "next build",
     "start": "next start",
     "lint": "next lint"
   }, 
   "dependencies": {
     "next": "13.0.3",
     "react": "18.2.0",
     "react-dom": "18.2.0"
   }
 }

1 - Criar a pasta do projeto

2 - Abrir o terminal do VSC

3 - Setar o c√≥digo e verificar node -v npm -v, para ver as vers√µes

4 - Depois clear "limpa" o terminal

5 - Depois npm install next react react-dom, para instalar as 3 ferramentas para iniciar o projeto

6 - Ao final da instala√ß√£o temos "node_modules" "package-lock.json" "package.json"

7 - No "package.json" "react": "^18.2.0", o chap√©u significa como auto identifica√ß√£o de atualiza√ß√£o ent√£o √© sempre bom tirar para que todos tenham o mesma vers√£o, ent√£o elimina o problema de atualiza√ß√£o de uma lib sem consentimento o qual "na minha maquina funciona e na sua n√£o" o √∫ltimo √≠ndice no caso √© o "mainor" que causa erro de inconsist√™ncia 

9 - Logo em seguida instala os scripts do Next.js geralmente indicado no site do Next no arquivo package.json, aonde e "chave" √© o nome que se utiliza para rodar e "valor" √© o comando do next preparado, atalhos! Tipo npm scripts.

10 - Ao usar o comando npm run dev, RUN √© para rodar, d√° ERRO porque deve-se, criar no main
OBS: Mensagem de ERRO Couldn't find a `pages` directory. Please create one under the project root

11 - Cria-se ent√£o o diretorio "pages" como pasta e logo em seguida "npm run dev", ap√≥s ele cria o ambiente em forma de servidor e apresenta, nesse caso, started server on 0.0.0.0:3000, url: http://localhost:3000, passando a URL

12 - Se aparecer essa mensagem, o Next est√° coletando informa√ß√µes devido a ter crescido muito: Attention: 
Next.js now collects completely anonymous telemetry regarding usage.
This information is used to shape Next.js' roadmap and prioritize features.
You can learn more, including how to opt-out if you'd not like to participate in this anonymous program, by visiting the following URL:
https://nextjs.org/telemetry

13 - Se aparecer o erro "This page could not be found" porque n√£o tem nada no page

14 - Dentro do diret√≥rio pages, adicione o arquivo index.js para come√ßar. Esta √© a p√°gina renderizada quando o usu√°rio visita a raiz do seu aplicativo. E coloca a fun√ß√£o descrita

15 - O servidor automaticamente, como se fosse um liveserver, o comando para parar o servidor e "crtl + c", e para rodar novamente √© "npm run dev"

16 - Diferentemente do CSS que usa classe e Id o qual mexe e quebra todos os demais, aqui no React usa-se por bloco o CSS s√£o independentes
<div style={cssHome}>PRIMEIRO PROJETO REACT E NEXT JS</div>
const texto = "PRIMEIRO PROJETO REACT E NEXT JS"
<div style={cssHome}>{texto}</div>
Parece bastante com a linguagem Liquid

18 - OBS sempre que quiser trabalhar div com return coloca-se (<div></div>), porque nesse caso d√° para trabalhar mais com espa√ßo e mais elementos, fica uma esp√©cie de array, n√£o se pode usar o style normal como em um documento HTML, deve-se passar um objeto como um json e nele on style css que deve ser utilizado. EX: style={{color: "red"}} 

19 - Criando uma constante variavel deve-se usar como somente uma chave {estilo CSS}

20 - A forma de se usar um componente cria-se a fun√ß√£o e depois usa-se como Tag igual ao HTML,

21 - Usa-se como parte de Back-end o arquivo Json para testes, criado como config.json e logo em seguida usando o import config from "../config.json"
Neste caso o "./" significa a pasta aonde vc est√°

22 - Logo em seguida para que o CSS funcione de forma completa inclusive como Media Queries, o estilo acima mencionado n√ßao deve ser usado, ent√£o instala-se uma lib chamada styled-components
comando : npm install styled-components

23 - Logo ap√≥s usar o vercel next js no github https://github.com/vercel/next.js:
Entra no link https://github.com/vercel/next.js/tree/canary/examples/with-styled-components e procura next.config.js e copia o c√≥digo para inserir em um novo arquivo com mesmo nome no projeto, depois importa no index.js atrav√©s do c√≥digo import styled from "styled-components"; 

24 - Estilizando uma div dentro do React, constr√≥i uma constante e logo em seguida personaliza e deve substituir a "div" pela constante;

25 - Pode colocar tamb√©m uma extens√£o VSC styled-components, para uso em React;

26 - Sendo assim pode tamb√©m usar class mas como "className", para evitar conflito no React;

27 - Pode=se usar normalmente h2, p, h6, etc...

28 - Conceito props, passa valores ao componente;

29 - Depois de constru√≠do os dados no caso pelo config.json e inserir aqui <Timeline playlist={config.playlist}></Timeline>, depois usa-se o props como parametro dentro de uma fun√ß√£o

30 - Ctrl + click leva ao documento apontando pelo mouse no VSC;

31 - Se precisar passar conte√∫do dentro de um componente abre ele e depois coloca no meio; 
Ex: <Timeline playlist={config.playlist}>
            Conteudo
        </Timeline>

Entrando assim como filho: children: "Conteudo"

32 - Uso de Object.keys(), deve-se usar como forma de array para resgatar a chave de um array;

33 - Para trabalhar com React deve-se dominar objeto, arrays e fun√ß√£o;

34 - Loop for tradicional chama-se de statement, mais no caso do React ele prefere o retorno por express√£o:
Ex: [1,2,3].forEach(function(){ return "aaa"})
undefined => retorna como undefined;
Ex:[1,2,3].map(function(){ return "aaa"})
['aaa', 'aaa', 'aaa'] => retorna valor pelo map, 
 Sendo assim √© convertido da lista de nomes para um componente React;
 O mesmo sendo usado em lista de Favoritos;

√â sempre mais usado o map para fazer loop j√° que ele retorna por express√£o;
- Para se usar o props(propriedades) primeiro:
- deve-se criar uma vari√°vel, e resgatar Object.keys(objeto chave) do array list de nome principal caso "playlist";
- {playlistFavorites.map((playlistFavorites) => depois usa-se a variavel resgatando em arrow function

35 - Crtl + shift + P formatar documento no VSC

36 - Para implementar um arquivo css.js deve-se criar em uma pasta e separar para maior organiza√ß√£o, no caso do CSSReset, ele √© implementado de forma global, n√£o esquecer de colocar o Import;

37 - Colocar projeto no reposit√≥rio Github => git init
Cuidado quando colocar esse comando para evitar as pastas desnecess√°rias como "next" e "node_modules"
Ent√£o deve colocar o comando => npx gitignore node
Fazendo assim com que os arquivos caiam somente os necess√°rios do projeto
Depois em seguida => git status¬¥para ver como est√° o projeto em seus arquivos
Depois logo em seguida quando se cria o rep√≥sitorio tem o passo a passo mais n√£o esquecer de colocar o git add .

38 - Ao mudar um arquivo o CSV d√° a op√ß√£o de mudar automaticamente a rota do diretorio;
Ou ainda mudar o nome do arquivo no caso de "Menu.js" para "index.js" o react adiciona um atalho para o index.js(p√°gina inicial);
Al√©m de fazer o auto import de arquivos;

39 - Toda vez que o usu√°rio faz alguma altera√ß√£o o React possui uma fun√ß√£o chamada onchange o qual carrega uma intera√ß√£o nova;
Tipo (addEventeListener);

40 - React.useState(); √â como se fosse uma fun√ß√£o de reexecutar algo na p√°gina como se reenderiza√ß√£o; Usado muito ao clicar em um campo de busca e cada letra e renderiza algo;
Ex: Search => Nome Busca
(2) ['frost', ∆í]
0       => √≠ndice "0" √© o valor da busca;
: 
"frost"
1       => √≠ndice "1" √© a fun√ß√£o do react que mudar a cada caraceter digitado e pede para recarregar a p√°gina;

Para ter uma busca que muda a cada carecter deve-se usar primeiro parametro para o "valorDaBusca" e o segundo parametro √© para setar o valor da busca "setValordaBusca";
Ex: const [valorDaBusca, setValordaBusca] = React.useState();

Mais EX:

export default function Search(){
  const [valorDaBusca, setValorDaBusca] = React.useState("Teste");
  console.log("Search", valorDaBusca);
  return(
    <StyledSearch>
      <input type="text" onChange={() => {
        console.log("Algo aconteceu!");
        setValorDaBusca("Novo Valor!");

      }} />
      {/* Aqui pode se usar a variavel como valor de busca ou placeholder */}
      {valorDaBusca} 
      <button>
      üîé
      </button>
    </StyledSearch>
  )


41 - O maior problema de quem come√ßa no REACT √© o fato de criar components √© tranquilo mais sincronizar eles √© o mais dif√≠cil;

42 - no caso valor da busca est√° no menu mais a timeline est√° sendo renderizado na home, como juntar os components para realizar a busca?

43 - Resposta: quem chama os dois componentes no caso √© a HOME, ent√£o pega-se o valor da variavel filtro e passa para a Timeline; Usando assim a propriedade tipo EX: searchValue={variavel valor do search}

44 - O modelo de atualiza√ß√£o do React e "top down" de cima para baixo, o fluxo da informa√ß√£o e sempre para baixo;
O React n√£o faz a comunica√ß√£o de components de filho para pai e pai para filho, j√° no angular essa comunica√ß√£o √© feita normalmente;

46 - deve repassar o valor do filtro para o Menu para ent√£o ele entenda quais valores s√£o v√°lidos;

47 - Prop Drilling => perfurando componentes e aplica√ß√µes e ir passando valores em top down;

48 - com o problema do Search de capitalize deve-se usar um conceito chamado Normalize;

49 - Pode-se usar o quokkajs como extens√£o do VSC para melhor aprendizado com console.log do que sai em um array ou ainda ver o que est√° acontecendo com c√≥digo 

50 - ERRO React "Each child in a list should have a unique "key" prop." 
Sempre que fizer um Map √© importante o React saber que o elemento √© √∫nico e n√£o renderizar toda a p√°gina, n√£o renderizando assim o bloco inteiro e somente o que muda;
Sendo assim o React otimiza os Rerenders